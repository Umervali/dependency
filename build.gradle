import java.util.zip.ZipFile

/*
 * Copyright 2014-2015 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'com.gradle.plugin-publish' version '0.9.7'
    id 'nebula.plugin-plugin' version '4.24.2'
    id 'nebula.kotlin' version '1.0.5'
    id 'java-gradle-plugin'
    id 'groovy'
}

description 'Inline dependency locking for Gradle'

contacts {
    'joschneider@netflix.com' {
        moniker 'Jon Schneider'
        github 'jkschneider'
    }
}

dependencies {
    compileOnly 'org.codehaus.groovy:groovy-all:2.4.7'
    compile 'com.beust:klaxon:0.27'
}

pluginBundle {
    plugins {
        kotlin {
            id = 'nebula.lock'
            displayName = 'Nebula Dependency Lock'
            description = project.description
            tags = ['nebula', 'dependency', 'lock']
        }
    }

    website = 'https://github.com/nebula-plugins/lock-experimental'
    vcsUrl = 'https://github.com/nebula-plugins/lock-experimental.git'
    description = 'Plugin to lock dynamic dependencies and forces'
}

compileGroovy.dependsOn = compileGroovy.taskDependencies.values - 'compileJava'
compileKotlin.dependsOn compileGroovy
compileKotlin.classpath += files(compileGroovy.destinationDir)
classes.dependsOn compileKotlin

task validatePlugin(dependsOn: jar) {
    doLast {
        com.gradle.publish.PublishTask publishTask = tasks.find { it instanceof com.gradle.publish.PublishTask }
        def jar = file('build/libs').listFiles().find {
            it.name.endsWith('.jar') &&
                    !it.name.endsWith('doc.jar') &&
                    !it.name.endsWith('sources.jar')
        }

        def validate = com.gradle.publish.PublishTask.class.declaredMethods.find {
            it.name == 'validatePluginDescriptor'
        }
        validate.accessible = true
        validate.invoke(publishTask, new ZipFile(jar), 'nebula.lock')
        logger.lifecycle('Validated plugin successfully')
    }
}