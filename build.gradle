//import java.util.zip.ZipFile

plugins {
    id 'com.gradle.plugin-publish' version '0.9.7'
    id 'nebula.plugin-plugin' version '4.24.2'
    id 'nebula.kotlin' version '1.2.21'
    id 'java-gradle-plugin'
    id 'groovy'
}

description 'Inline dependency locking for Gradle'

contacts {
    'jschneider@pivotal.io' {
        moniker 'Jon Schneider'
        github 'jkschneider'
    }
}

dependencies {
    compileOnly 'org.codehaus.groovy:groovy-all:2.4.12'
	compile 'org.jetbrains.kotlin:kotlin-reflect'
}

pluginBundle {
    plugins {
        kotlin {
            id = 'nebula.lock'
            displayName = 'Nebula Dependency Lock'
            description = project.description
            tags = ['nebula', 'dependency', 'lock']
        }
    }

    website = 'https://github.com/nebula-plugins/lock-experimental'
    vcsUrl = 'https://github.com/nebula-plugins/lock-experimental.git'
    description = 'Plugin to lock dynamic dependencies and forces'
}

compileGroovy.dependsOn.remove('compileJava')
compileKotlin.dependsOn compileGroovy
compileKotlin.classpath += files(compileGroovy.destinationDir)
classes.dependsOn compileKotlin

//task validatePlugin(dependsOn: jar) {
//    doLast {
//        com.gradle.publish.PublishTask publishTask = tasks.find { it instanceof com.gradle.publish.PublishTask }
//        def jar = file('build/libs').listFiles().find {
//            it.name.endsWith('.jar') &&
//                    !it.name.endsWith('doc.jar') &&
//                    !it.name.endsWith('sources.jar')
//        }
//
//        def validate = com.gradle.publish.PublishTask.class.declaredMethods.find {
//            it.name == 'validatePluginDescriptor'
//        }
//        validate.accessible = true
//        validate.invoke(publishTask, new ZipFile(jar), 'nebula.lock')
//        logger.lifecycle('Validated plugin successfully')
//    }
//}